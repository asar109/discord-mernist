// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String    @db.Text
  email     String    @db.Text
  servers   Server[]
  members   Member[]
  channels  Channel[]
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

model Server {
  id         String    @id @default(uuid())
  name       String    @db.Text
  imageUrl   String    @db.Text
  profileId  String
  inviteCode String    @unique
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id                     String          @id @default(uuid())
  role                   MemberRole      @default(GUEST)
  profileId              String
  profile                Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages               message[]
  conversationsInitiated conversation[]  @relation("MemberOne")
  conversationsReceived  conversation[]  @relation("MemberTwo")
  directMessages         DirectMessage[]
  updatedAt              DateTime        @updatedAt
  createdAt              DateTime        @default(now())

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String      @id @default(uuid())
  name      String      @db.Text
  type      ChannelType @default(TEXT)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  message[]
  updatedAt DateTime    @updatedAt
  createdAt DateTime    @default(now())

  @@index([profileId])
  @@index([serverId])
}

model message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([channelId])
}

model conversation {
  id          String @id @default(uuid())
  memberOneId String
  memberOne   Member @relation(name: "MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member @relation(name: "MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  conversationId String
  conversation   conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([conversationId])
  @@index([memberId])
}
